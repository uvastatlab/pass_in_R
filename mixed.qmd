---
title: "Mixed-effect models"
---

## Random intercept model: continuous slope

In this model the slope coefficient represents a trend.

For power estimation based on sample size, we need the following:

- Between group standard deviation (Intercept random effect)
- Within group standard deviation (residual standard deviation)
- Sample size (n) in each group (N)
- Effect size (slope coefficient)
- Intercept coefficient
- Significance level of test
- Direction of test: one or two-sided

### Example

We are planning an experiment where we track the BMI of college students over their four years at school. We'll measure their BMI at the beginning of each school year in August. We would like sufficient power to detect a year trend of at least 0.25 if we recruit 15 students to the study. The null hypothesis we'll test is that the year (slope) coefficient is 0. Rejecting this hypothesis provides evidence of a change in BMI over time. Assume the following:

- Between group standard deviation of 3
- Within group standard deviation 1
- Sample size in each group: 4 obs each of 15 students
- Effect size of 0.25 (slope coefficient)
- Intercept coefficient: 20
- Significance level of test: 0.01
- Direction of test: two-sided

We can use simulation to estimate the power of a hypothesis test on a specific coefficient in a model. This example uses the simr package [@simr].

First we create a data frame of 4 observations each of 15 students.

```{r message=FALSE}
library(simr)
year <- 1:4
student <- 1:15
d <- expand.grid(year = year, student = student)
head(d, n = 8)
```

Now define our between and within group variance. Note that the simr package requires the between group variance be expressed as variance and the within group variance be expressed as standard deviation.

```{r}
between <- 3^2 # random intercept variance
within <- 1 # residual standard deviation
```

Next define our effects. We need to provide intercept and slope coefficients. The slope coefficient is the effect we will test. The intercept can be interpreted as the average BMI for the students' first year of college.

```{r}
b <- c(20, 0.25) # fixed intercept and slope
```

Now define our model using the `makeLmer()` function. This function will simulate BMI values based on our hypothesized coefficients and variances.

```{r message=FALSE}
m <- makeLmer(bmi ~ year + (1|student), 
              fixef = b, 
              VarCorr = between, 
              sigma = within, 
              data= d)
print(m)
```

Finally use the `powerSim()` function to estimate the power of the test on the slope using 100 simulations. Setting `progress = FALSE` suppresses a progress bar which we don't want to output in this online book. The seed argument makes the following result reproducible. The `fixed()` function dictates what coefficient we want to test. In this case we want to test the "year" coefficient using a "t" test. 

```{r message=FALSE}
# power of test on slope
powerSim(m, 
         test = fixed("year", "t"),
         seed = 1,
         nsim = 100, 
         alpha = 0.01, 
         progress = FALSE)
```

Our power is estimated to be about 0.37. The confidence interval is based on a simple binomial test.

```{r}
round(binom.test(x = 37, n = 100)$conf.int * 100, 2)
```

This power is low. Let's try increasing the sample size. We can do that with the `extend()` function. Below we increase the sample size to 30 and re-run the simulation.

```{r message=FALSE}
m2 <- extend(m, along = "student", n = 30)
powerSim(m2, 
         test = fixed("year", "t"),
         seed = 2,
         nsim = 100, 
         alpha = 0.01, 
         progress = FALSE)
```

Power is higher but still too low at 0.64. 

We can generate a power curve with varying sample sizes using the `powerCurve()` function. First extend the data set by the maximum number of students we're willing to entertain and then call the `powerCurve()` function. Below we specify a maximum of 40 students. Note this can take a while to run for large data sets and complex models. We have lowered the default number of simulations from 1000 to 100. The breaks argument says we want to try sample sizes ranging from 30 to 40 in steps of 2.

```{r message=FALSE}
m3 <- extend(m, along = "student", n = 40)
pc <- powerCurve(m3, 
                 test = fixed("year", "t"), 
                 seed = 5,
                 along = "student",
                 breaks = seq(30,40,2),
                 nsim = 100, 
                 alpha = 0.01,
                 progress = FALSE)
plot(pc)
```

It appears we need about 38 students to achieve power of at least 0.80. 

## Random intercept and random slope model: continuous slope

In this model the slope coefficient represents a trend.

For power estimation based on sample size, we need the following:

- Intercept random effect
- Slope random effect
- Intercept and slope random effects covariance
- Within group standard deviation (residual standard deviation)
- Sample size (n) in each group (N)
- Effect size (slope coefficient)
- Intercept coefficient
- Significance level of test
- Direction of test: one or two-sided

### Example

We are planning an experiment where we track the BMI of college students over their four years at school. We'll measure their BMI at the beginning of each school year in August. We would like sufficient power to detect a year trend of at least 0.25 if we recruit 15 students to the study. The null hypothesis we'll test is that the year (slope) coefficient is 0. Rejecting this hypothesis provides evidence of a change in BMI over time. Assume the following:

- Intercept random effect of 3
- Slope random effect of 0.2
- Intercept and slope random effects covariance of 0.5
- Within group standard deviation 1
- Sample size in each group: 4 obs each of 15 students
- Effect size of 0.25 (slope coefficient)
- Intercept coefficient: 20
- Significance level of test: 0.01
- Direction of test: two-sided

We can use simulation to estimate the power of a hypothesis test on a specific coefficient in a model. This example uses the simr package [@simr].

First we create a data frame of 4 observations each of 15 students.

```{r message=FALSE}
year <- 1:4
student <- 1:15
d <- expand.grid(year = year, student = student)
head(d, n = 8)
```

Now define our intercept and slope random effects. Note that the simr package requires this be entered as a matrix. We also need to enter the random effects as variances, so we square each entry.

```{r}
re <- matrix(c(3^2, 0.5^2, 0.5^2, 0.2^2), 2) 
rownames(re) <- colnames(re) <- c("intercept", "slope")
re
```

Then we define the residual standard deviation.

```{r}
resid_sd <- 1 # residual standard deviation
```

Next define our effects. We need to provide intercept and slope coefficients. The slope coefficient is the effect we will test. The intercept can be interpreted as the average BMI for the students' first year of college.

```{r}
b <- c(20, 0.25) # fixed intercept and slope
```

Now define our model using the `makeLmer()` function. This function will simulate BMI values based on our hypothesized coefficients and variances.

```{r message=FALSE}
m <- makeLmer(bmi ~ year + (year|student), 
              fixef = b, 
              VarCorr = re, 
              sigma = resid_sd, 
              data= d)
print(m)
```

Finally use the `powerSim()` function to estimate the power of the test on the slope using 100 simulations. Setting `progress = FALSE` suppresses a progress bar which we don't want to output in this online book. The seed argument makes the following result reproducible. The `fixed()` function dictates what coefficient we want to test. In this case we want to test the "year" coefficient using a "t" test. 

```{r message=FALSE}
# power of test on slope
powerSim(m, 
         test = fixed("year", "t"),
         seed = 1,
         nsim = 100, 
         alpha = 0.01, 
         progress = FALSE)
```

Our power is estimated to be about 0.19. The confidence interval is based on a simple binomial test.

```{r}
round(binom.test(x = 19, n = 100)$conf.int * 100, 2)
```

This power is low. Let's try increasing the sample size. We can do that with the `extend()` function. Below we increase the sample size to 30 and re-run the simulation.

```{r message=FALSE}
m2 <- extend(m, along = "student", n = 30)
powerSim(m2, 
         test = fixed("year", "t"),
         seed = 2,
         nsim = 100, 
         alpha = 0.01, 
         progress = FALSE)
```

Power is higher but still too low at 0.55. 

We can generate a power curve with varying sample sizes using the `powerCurve()` function. First extend the data set by the maximum number of students we're willing to entertain and then call the `powerCurve()` function. Below we specify a maximum of 50 students. Note this can take a while to run for large data sets and complex models. We have lowered the default number of simulations from 1000 to 100. The breaks argument says we want to try sample sizes ranging from 40 to 50 in steps of 2.

```{r message=FALSE}
m3 <- extend(m, along = "student", n = 50)
pc <- powerCurve(m3, 
                 test = fixed("year", "t"), 
                 seed = 5,
                 along = "student",
                 breaks = seq(40,50,2),
                 nsim = 100, 
                 alpha = 0.01,
                 progress = FALSE)
plot(pc)
```

It appears we need about 44 students to achieve power of at least 0.80. 

## Random intercept model: binary slope

In this model the slope coefficient represents a population treatment effect. In other words, we're comparing means between two groups.

For power estimation based on sample size, we need the following:

- Between group standard deviation (Intercept random effect)
- Within group standard deviation (residual standard deviation)
- Sample size (n) in each group (N)
- Effect size (slope coefficient)
- Intercept coefficient
- Significance level of test
- Direction of test: one or two-sided

### Example: closed-form expression

We are planning a multisite experiment where we will compare two types of bug traps, an older model (control) and a newer model (treatment). At each site we will place 5 traps of each type (10 total) and return in 30 days to weigh the amount of invasive bugs captured. We think it would be meaningful if our new trap captured 3 grams of additional bugs on average. We assume there is a between site standard deviation of 2 and a within site standard deviation of 6. How powerful is our experiment if we select 10 sites to run this experiment? Assume a two-sided test and a significance level of 0.05.

Crespi [-@crespi] describes how to estimate power for a design such as this using a noncentral t distribution. The `multisite.cont()` function in the powertools package [@powertools] implements this formula.

Note the `multisite.cont()` function requires the total standard deviation of the outcome variable and the intraclass correlation coefficient (ICC) of the random intercept. We can derive both of these from the information given above.

The total standard deviation of the outcome is the square root of the sum of the between and within variances:

  $$\sqrt{2^2 + 6^2}  = \sqrt{40}$$

The ICC of the random intercept is the between group variance divided by total variance:

  $$\text{ICC} = 4/40 = 0.1 $$

The ICC for the random intercept is provided to the function using the `icc0` argument. The total standard deviation of the outcome is provided using the `sd` argument.

```{r}
library(powertools)
multisite.cont(m = 10,          # number of traps (5 in each condition)
               J = 10,          # number of sites
               delta = 3,       # treatment effect
               sd = sqrt(40),   # total sd of outcome
               icc0 = 0.1,     # icc of random effect
               icc1 = 0,        # icc of random slope (0 in this example)
               alpha = 0.05,    # significance level of test
               power = NULL,    # set to NULL since we want power
               v = TRUE)        # verbose, return more detail
```

The estimated power is about 0.61.

We can try multiple sample sizes using the `sapply()` function. We apply the `multisite.cont()` function to sample sizes ranging from 10 - 20. Notice that sample size in this case is the number of sites.

```{r}
power <- sapply(10:20, function(x)multisite.cont(m = 10,          
                                 J = x,
                                 delta = 3,
                                 sd = sqrt(40),
                                 icc0 = 0.1,
                                 icc1 = 0,
                                 alpha = 0.05,
                                 power = NULL))
data.frame(sample_size = 10:20, power)
```

A sample size of 15 gets us to power over 0.80, and sample size of about 19 gets us up to 0.90.

### Example: simulation

We can also estimate power using simulation via the simr package [@simr].

Let's restate the setup: we are planning a multisite experiment where we will compare two types of bug traps, an older model (control) and a newer model (treatment). At each site we will place 5 traps of each type (10 total) and return in 30 days to weigh the amount of invasive bugs captured. We think it would be meaningful if our new trap captured 3 grams of additional bugs on average. We assume there is a between site standard deviation of 2 and a within site standard deviation of 6. How powerful is our experiment if we select 10 sites to run this experiment? Assume a two-sided test and a significance level of 0.05.

First we create a data frame of 10 observations each at 10 sites. Then we add a sequence of five zeroes and five ones to indicate treatment. A zero means control and one means treated.

```{r}
library(simr)
trap <- 1:10
site <- 1:10
d <- expand.grid(trap = trap, site = site)
d$trt <- rep(c(rep(0, 5), rep(1, 5)), 10)
head(d, n = 12)
```

Now define our between and within group variance. Note that the simr package requires the between group variance be expressed as variance and the within group variance be expressed as standard deviation.

```{r}
between <- 2^2 # random intercept variance
within <- 6 # residual standard deviation
```

Next define our effects. We need to provide intercept and slope coefficients. The slope coefficient is the effect we will test. The intercept can be interpreted as the average mass of bugs captured in the control trap.

```{r}
b <- c(10, 3) # fixed intercept and slope
```

Now define our model using the `makeLmer()` function. This function will simulate mass values based on our hypothesized coefficients and variances.

```{r message=FALSE}
m <- makeLmer(mass ~ trt + (1|site), 
              fixef = b, 
              VarCorr = between, 
              sigma = within, 
              data = d)
print(m)
```

Finally use the `powerSim()` function to estimate the power of the test on the slope using 100 simulations. Setting `progress = FALSE` suppresses a progress bar which we don't want to output in this online book. The seed argument makes the following result reproducible. The `fixed()` function dictates what coefficient we want to test. In this case we want to test the "trt" coefficient using a "t" test. 

```{r message=FALSE}
# power of test on slope
powerSim(m, 
         test = fixed("trt", "t"),
         seed = 1,
         nsim = 100, 
         alpha = 0.05, 
         progress = FALSE)
```

Power based on simulation is estimated to be about 0.65.

We can generate a power curve with varying sample sizes using the `powerCurve()` function. First extend the data set by the maximum number of sites we're willing to entertain and then call the `powerCurve()` function. Below we specify a maximum of 20 sites. Note this can take a while to run for large data sets and complex models. We have lowered the default number of simulations from 1000 to 100. The breaks argument says we want to try sample sizes ranging from 10 to 20 in steps of 1.

```{r message=FALSE}
m2 <- extend(m, along = "site", n = 20)
pc <- powerCurve(m2, 
                 test = fixed("trt", "t"), 
                 seed = 5,
                 along = "site",
                 breaks = 10:20,
                 nsim = 100, 
                 alpha = 0.05,
                 progress = FALSE)
plot(pc)
```

According to simulation, we need to sample 16 sites to reliably achieve power of at least 0.80. 

## Random intercept and random slope model: binary slope

In this model the slope coefficient represents a population treatment effect. In other words, we're comparing means between two groups. The random slope allows the effect of the treatment to depend on the random group.

For power estimation based on sample size, we need the following:

- Intercept random effect
- Slope random effect
- Intercept and slope random effects covariance (optional)
- Within group standard deviation (residual standard deviation)
- Sample size (n) in each group (N)
- Effect size (slope coefficient)
- Intercept coefficient
- Significance level of test
- Direction of test: one or two-sided

### Example: closed-form expression

We are planning a multisite experiment where we will compare two types of bug traps, an older model (control) and a newer model (treatment). At each site we will place 5 traps of each type (10 total) and return in 30 days to weigh the amount of invasive bugs captured. We think it would be meaningful if our new trap captured 3 grams of additional bugs on average. We assume there is an Intercept random effect of 2 (between site standard deviation), a slope random effect of $\sqrt{8}$, and a within site standard deviation of 6. How powerful is our experiment if we select 10 sites to run this experiment? Assume a two-sided test and a significance level of 0.05.

Crespi [-@crespi] describes how to estimate power for a design such as this using a noncentral t distribution. The `multisite.cont()` function in the powertools package [@powertools] implements this formula.

Note the `multisite.cont()` function requires the total standard deviation of the outcome variable and two intraclass correlation coefficients (ICC):

- icc0: proportion of variance due to random groups
- icc1: proportion of variance due to random slope

The total standard deviation of the outcome is calculated as follows (Crespi, page 221):

$$\sqrt{Var(Y_{ij})} = \sqrt{2^2 + \frac{1}{4}8 + 6^2}  = \sqrt{42}$$

The ICC of the random intercept is the between group variance divided by total variance:

  $$\text{ICC}_0 = 4/42 \approx 0.095$$

The ICC of the random slope is one-fourth the random slope variance divided by the total variance.

  $$\text{ICC}_1 = \frac{1/4 * 8}{42} \approx 0.048$$

The ICC for the random intercept is provided to the function using the `icc0` argument. The ICC for the random slope is provided using the `icc1` argument. The total standard deviation of the outcome is provided using the `sd` argument.


```{r}
multisite.cont(m = 10, J = 10, delta = 3, sd = sqrt(42), 
               icc0 = 0.095,
               icc1 = 0.048, 
               power = NULL, v = TRUE)
```

The estimated power is about 0.43.

We can try multiple sample sizes using the `sapply()` function. We apply the `multisite.cont()` function to sample sizes ranging from 12 - 30 in increments of 3. Notice that sample size in this case is the number of sites.

```{r}
power <- sapply(seq(12,30,3), function(x)multisite.cont(m = 10,          
                                 J = x,
                                 delta = 3,
                                 sd = sqrt(42),
                                 icc0 = 0.095,
                                 icc1 = 0.048, 
                                 alpha = 0.05,
                                 power = NULL))
data.frame(sample_size = seq(12,30,3), power)
```

A sample size of 24 gets us to power over 0.80, and sample size of 30 gets us up to 0.90.

### Example: simulation

We can also estimate power using simulation via the simr package.

Let's restate the setup: We are planning a multisite experiment where we will compare two types of bug traps, an older model (control) and a newer model (treatment). At each site we will place 5 traps of each type (10 total) and return in 30 days to weigh the amount of invasive bugs captured. We think it would be meaningful if our new trap captured 3 grams of additional bugs on average. We assume there is an Intercept random effect of 2 (between site standard deviation), a slope random effect of $\sqrt{8}$, and a within site standard deviation of 6. How powerful is our experiment if we select 10 sites to run this experiment? Assume a two-sided test and a significance level of 0.05.

First we create a data frame of 10 observations each at 10 sites. Then we add a sequence of five zeroes and five ones to indicate treatment. A zero means control and one means treated.

```{r}
site <- 1:10
trap <- 1:10
d <- expand.grid(trap = trap, site = site)
d$trt <- rep(c(rep(0, 5), rep(1, 5)), 10)
head(d)
```

Now define our intercept and slope random effects. Note that the simr package requires these be expressed as variances in a matrix. The within group variance needs to be expressed as standard deviation. To replicate the example above using a closed-form expression, we set the covariance of the random effects to 0.

```{r}
between <- matrix(c(4,0,0,8), nrow = 2)
within <- 6 
```

Next define our effects. We need to provide intercept and slope coefficients. The slope coefficient is the effect we will test. The intercept can be interpreted as the average mass of bugs captured in the control trap.

```{r}
b <- c(10, 3) # fixed intercept and slope
```

Now define our model using the `makeLmer()` function. This function will simulate mass values based on our hypothesized coefficients and variances.

```{r message=FALSE}
m <- makeLmer(mass ~ trt + (trt|site), 
              fixef = b, 
              VarCorr = between, 
              sigma = within, 
              data= d)
print(m)
```


Finally use the `powerSim()` function to estimate the power of the test on the slope using 100 simulations. Setting `progress = FALSE` suppresses a progress bar which we don't want to output in this online book. The seed argument makes the following result reproducible. The `fixed()` function dictates what coefficient we want to test. In this case we want to test the "trt" coefficient using a "t" test. 

```{r message=FALSE}
powerSim(m, 
         test = fixed("trt", "t"),
         seed = 2000,
         nsim = 100, 
         alpha = 0.05, 
         progress = FALSE)
```

Power based on simulation is estimated to be about 0.41.

We can generate a power curve with varying sample sizes using the `powerCurve()` function. First extend the data set by the maximum number of sites we're willing to entertain and then call the `powerCurve()` function. Below we specify a maximum of 30 sites. Note this can take a while to run for large data sets and complex models. We have lowered the default number of simulations from 1000 to 100. The breaks argument says we want to try sample sizes ranging from 12 to 30 in steps of 3.

```{r message=FALSE}
m2 <- extend(m, along = "site", n = 30)
pc <- powerCurve(m2, 
                 test = fixed("trt", "t"), 
                 seed = 5,
                 along = "site",
                 breaks = seq(12, 30, 3),
                 nsim = 100, 
                 alpha = 0.05,
                 progress = FALSE)
plot(pc)
```

According to simulation, we need to sample 30 sites to reliably achieve power of at least 0.80. We see that the assumption of random slopes requires larger sample sizes to achieve sufficient levels of power.